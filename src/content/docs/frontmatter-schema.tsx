import { fields } from '@keystatic/core';

export const frontmatterSchema = {
  title: fields.slug({
    name: {
      label: 'Title',
      validation: { isRequired: true },
      description:
        'This will be displayed at the top of the page, in browser tabs, and in page metadata.',
    },
  }),
  description: fields.text({
    label: 'Description',
    multiline: true,
    description:
      'The page description is used for page metadata and will be picked up by search engines and in social media previews.',
  }),
  slug: fields.text({
    label: 'Slug',
    description:
      'You can override an entry’s generated slug by adding your own slug.',
  }),
  editUrl: fields.url({
    label: 'Edit url',
    description:
      'Overrides the global editLink config. Set to false to disable the “Edit page” link for a specific page or provide an alternative URL where the content of this page is editable.',
  }),
  template: fields.select({
    label: 'Template',
    options: [
      { label: 'Doc', value: 'doc' },
      { label: 'Splash', value: 'splash' },
    ],
    defaultValue: 'doc',
    description:
      "Set the layout template for this page. Pages use the 'doc' layout by default. Set to 'splash' to use a wider layout without any sidebars designed for landing pages.",
  }),
  pagefind: fields.checkbox({
    label: 'Show in search results',
    defaultValue: true,
    description:
      'Set whether this page should be included in the Pagefind search index. Set to false to exclude a page from search results.',
  }),
  draft: fields.checkbox({
    label: 'Draft',
    defaultValue: false,
    description:
      'Set whether this page should be considered a draft and not be included in production builds and autogenerated link groups. Set to true to mark a page as a draft and make it only visible during development.',
  }),
  // hero: fields.object(
  //   {
  //     title: fields.text({ label: 'Title' }),
  //     tagline: fields.text({ label: 'Tagline' }),
  //     actions: fields.array(
  //       fields.object({
  //         text: fields.text({ label: 'Text' }),
  //         link: fields.text({ label: 'Link' }),
  //         icon: fields.select({
  //           label: 'Icon',
  //           options: iconsList,
  //           defaultValue: iconsList[0].value,
  //         }),
  //         variant: fields.select({
  //           label: 'Variant',
  //           options: [
  //             { label: 'Primary', value: 'primary' },
  //             { label: 'Secondary', value: 'secondary' },
  //             { label: 'Minimal', value: 'minimal' },
  //           ],
  //           defaultValue: 'minimal',
  //         }),
  //       }),
  //       {
  //         label: 'Actions',
  //         itemLabel: data => data.fields.text.value,
  //       }
  //     ),
  //   },
  //   { label: 'Hero' }
  // ),
  sidebar: fields.object(
    {
      label: fields.text({
        label: 'Label',
        description:
          'Set the label for this page in the sidebar when displayed in an autogenerated group of links.',
      }),
      order: fields.number({
        label: 'Order',
        description:
          'Control the order of this page when sorting an autogenerated group of links. Lower numbers are displayed higher up in the link group.',
      }),
      hidden: fields.checkbox({
        label: 'Hide',
        defaultValue: false,
        description:
          'Prevents this page from being included in an autogenerated sidebar group.',
      }),
      badge: fields.text({
        label: 'Badge',
        description:
          'Add a badge to the page in the sidebar when displayed in an autogenerated group of links.',
      }),
    },
    {
      label: 'Sidebar',
      description:
        'Control how this page is displayed in the sidebar, when using an autogenerated link group.',
    }
  ),
};
